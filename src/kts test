var KhananiToken = artifacts.require("./KhananiToken.sol");
var KhananiTokenSale = artifacts.require("./KhananiTokenSale.sol");

contract('KhananiTokenSale', function(accounts){
    var tokenInstance;
    var tokenSaleInstance;
    var tokenPrice = 1000000000000000; // in wei
    var admin = accounts[0];
    var buyer = accounts[1];
    var tokensAvailable = 750000;
    var numberOfTokens;
    it('initializes the contract with correct value',function(){
        return KhananiTokenSale.deployed().then(function(instance){
            tokenSaleInstance = instance;
            return tokenSaleInstance.address;
        }).then(function(address){
            assert.notEqual(address, 0x0, 'has contract address');
            return tokenSaleInstance.tokenContract();
        }).then(function(address){
            assert.notEqual(address, 0x0, 'has token contract address');
            return tokenSaleInstance.tokenPrice();
        })
        .then(function(price){
            assert.equal(price,tokenPrice, 'token price is correct');
            //return tokenSaleInstance.standard();
        })
        //.then(function(tokenStandard){
        //     assert.equal(tokenStandard, 'Khanani Token v1.0');
        // })
    })

    it('facilitates token buying',function(){
        return KhananiToken.deployed().then(function(instance){
            tokenInstance = instance;
            return KhananiTokenSale.deployed();
        }).then(function(SInstance){
            tokenSaleInstance = SInstance;
            //provision 75% of all token sale 
            return tokenInstance.transfer(tokenSaleInstance.address, tokensAvailable, {from:admin} );
        }).then(function(receipt){
            assert.equal(receipt.logs.length, 1, 'trigger one event');
            assert.equal(receipt.logs[0].event, 'Transfer', 'should be a transfer event');
            assert.equal(receipt.logs[0].args._from, tokenSaleInstance.address, 'logs the account tokens are transferred from');
            assert.equal(receipt.logs[0].args._to, admin, 'logs the account tokens are transferred to');
            assert.equal(receipt.logs[0].args._value, tokensAvailable, 'logs the transfer amount');
            numberOfTokens = 10;
            //var value = numberOfTokens * tokenPrice; 
            
            return tokenSaleInstance.buyToken(numberOfTokens,{from: buyer, value: numberOfTokens * tokenPrice});
        }).then(function(receipt){
            console.log('--------',receipt.logs[0].args._amount)
            assert.equal(receipt.logs.length, 1, 'trigger one event');
            assert.equal(receipt.logs[0].event, 'Sell', 'should be a sell event');
            assert.equal(receipt.logs[0].args._buyer, buyer, 'logs the account that purchased tokens');
            assert.equal(receipt.logs[0].args._amount, numberOfTokens, 'logs the number of token purchased');
            return tokenSaleInstance.tokensSold();
        }).then(function(amount){
            console.log('amount----',amount.toNumber())
            assert.equal(amount.toNumber(), numberOfTokens, 'increments the number of tokens sold');
            return tokenInstance.balanceOf(buyer);
        })
        .then(function(buyerBalance){
            console.log('buyer----',buyerBalance.toNumber())
            assert.equal(buyerBalance.toNumber(), numberOfTokens)    
            return tokenInstance.balanceOf(tokenSaleInstance.address);
        })
        .then(function(balance){
            assert.equal(balance.toNumber(), tokensAvailable - numberOfTokens)
            //try to buy token diff from the ether value
            return tokenSaleInstance.buyToken(numberOfTokens,{from: buyer, value: 1});
        }).then(assert.fail).catch(function(error){
            assert(error.message.indexOf('revert') >= 0, 'msg.value must be equal number of tokens in wei')
            return tokenSaleInstance.buyToken(800000,{from: buyer, value: numberOfTokens * tokenPrice});
        })
        .then(assert.fail).catch(function(error){
            console.log(error);
            assert(error.message.indexOf('revert') >= 0, ' cannot purchase more tokens then available')
        })
    });


    it('Ends Token Sale',function(){
        return KhananiToken.deployed().then(function(instance){
            tokenInstance = instance;
            return KhananiTokenSale.deployed();
        }).then(function(SInstance){
            tokenSaleInstance = SInstance;
            //try to end sale other than admin
            return tokenSaleInstance.endSale({from:buyer});
        }).then(assert.fail).catch(function(error){
            //console.log(error);
            assert(error.message.indexOf('revert') >= 0, 'must be admin to end sales');
            return tokenSaleInstance.endSale({from:admin});
        }).then(function(receipt){
            //console.log(receipt);
            // assert.equal(receipt.logs.length, 1, 'trigger one event');
            // assert.equal(receipt.logs[0].event, 'Sell', 'should be a sell event');
            // assert.equal(receipt.logs[0].args._buyer, buyer, 'logs the account that purchased tokens');
            // assert.equal(receipt.logs[0].args._amount, numberOfTokens, 'logs the number of token purchased');
            return tokenInstance.balanceOf(admin);
        }).then(function(balance){
            assert.equal(balance.toNumber(), 999990, 'returns all unsold khanani tokens to admins');
        })

    })
});


// it('facilitates token buying', function() {
    //     return KhananiToken.deployed().then(function(instance) {
    //       // Grab token instance first
    //       tokenInstance = instance;
    //       return KhananiTokenSale.deployed();
    //     }).then(function(instance) {
    //       // Then grab token sale instance
    //       tokenSaleInstance = instance;
    //       // Provision 75% of all tokens to the token sale
    //       return tokenInstance.transfer(tokenSaleInstance.address, tokensAvailable, { from: admin })
    //     }).then(function(receipt) {
    //       numberOfTokens = 10;
    //       return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: numberOfTokens * tokenPrice })
    //     }).then(function(receipt) {
    //       assert.equal(receipt.logs.length, 1, 'triggers one event');
    //       assert.equal(receipt.logs[0].event, 'Sell', 'should be the "Sell" event');
    //       assert.equal(receipt.logs[0].args._buyer, buyer, 'logs the account that purchased the tokens');
    //       assert.equal(receipt.logs[0].args._amount, numberOfTokens, 'logs the number of tokens purchased');
    //       return tokenSaleInstance.tokensSold();
    //     }).then(function(amount) {
    //       assert.equal(amount.toNumber(), numberOfTokens, 'increments the number of tokens sold');
    //       return tokenInstance.balanceOf(buyer);
    //     }).then(function(balance) {
    //       assert.equal(balance.toNumber(), numberOfTokens);
    //       return tokenInstance.balanceOf(tokenSaleInstance.address);
    //     }).then(function(balance) {
    //       assert.equal(balance.toNumber(), tokensAvailable - numberOfTokens);
    //       // Try to buy tokens different from the ether value
    //       return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: 1 });
    //     }).then(assert.fail).catch(function(error) {
    //       assert(error.message.indexOf('revert') >= 0, 'msg.value must equal number of tokens in wei');
    //       return tokenSaleInstance.buyTokens(800000, { from: buyer, value: numberOfTokens * tokenPrice })
    //     }).then(assert.fail).catch(function(error) {
    //       assert(error.message.indexOf('revert') >= 0, 'cannot purchase more tokens than available');
    //     });
    //   });